import csv
import json
import os
from datetime import datetime

from .log import LOGGER


class OutputEngine(object):
    def __init__(self, filename=None, packages=None, logger=None):
        if logger is None:
            logger = LOGGER.getChild(self.__class__.__name__)
        self.filename = filename
        self.packages = packages
        self.logger = logger
        self.formatted_output = self.format_output()

    def generate_filename(self, extension=None):
        """ Generates a random filename"""
        if extension:
            now = datetime.now().strftime("%Y-%m-%d.%H:%m:%S")
            self.filename = f"output.cve-bin-tool.{now}.{extension}"

    def output_cves(self, outfile, output_type=None):
        """ Output a list of CVEs
        format self.packages[checker_name][version] = dict{id: severity}
        to other formats like CSV or JSON
        """
        if output_type == "json":
            self.output_json(outfile)
        else:  # csv, console, or anything else that is unrecognised
            self.output_csv(outfile)

    def format_output(self):
        """
        summary: format output in the list of dictionary format.
        
        Returns:
            type: list(dict) -- example: [{ "package": "curl",
                                            "version": "1.2.1",
                                            "cve_number": "CVE-1234-1234", 
                                            "severity": "LOW"},
                                            ...]
        """
        formatted_output = []
        for package in self.packages:
            for version, cves in self.packages[package].items():
                for cve_number, cve_severity in cves.items():
                    formatted_output.append(
                        {
                            "package": package,
                            "version": version,
                            "cve_number": cve_number,
                            "severity": cve_severity,
                        }
                    )
        return formatted_output

    def output_json(self, outfile):
        """ Output a JSON of CVEs """
        json.dump(self.formatted_output, outfile, indent="    ")

    def output_csv(self, outfile):
        """ Output a CSV of CVEs """
        writer = csv.DictWriter(
            outfile, fieldnames=["package", "version", "cve_number", "severity"]
        )
        writer.writeheader()
        writer.writerows(self.formatted_output)

    def output_file(self, output_type="csv"):

        """ Generate a file for list of CVE """

        # Check if we need to generate a filename
        if self.filename is None:
            self.generate_filename(output_type)
        else:
            # check if the filename already exists
            file_list = os.listdir(os.getcwd())
            if self.filename in file_list:
                self.logger.warning(
                    f"Failed to write at '{self.filename}'. File already exists"
                )
                self.logger.info(
                    "Generating a new filename with Default Naming Convention"
                )
                self.generate_filename(output_type)

            # try opening that file
            try:
                with open(self.filename, "w") as f:
                    f.write("testing")
                os.remove(self.filename)
            except Exception as E:
                self.logger.warning(E)
                self.logger.info("Switching Back to Default Naming Convention")
                self.generate_filename(output_type)

        # Log the filename generated
        self.logger.info(f"Output stored at {os.getcwd()}/{self.filename}")

        # call to output_cves
        with open(self.filename, "w") as f:
            self.output_cves(f, output_type)
